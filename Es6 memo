
[
    this특징
1. window : 그냥 쓰거나 일반 함수 안에서 쓰면 {window}

2. 자바스크립트 strict mode : 'use strict' + 일반함수 내에서 쓰면 undefined(안중요)

3. 오브젝트.함수 안에서 쓰면 그 함수를 가지고 있는 오브젝트를 뜻함

4. arrow function은 상위요소가 가지고 있는 this값을 반환함{window}

그래서 함수나 변수를 전역공간에서 만들면 {window}에 보관함.
그래서 함수 실행할때 window.함수()라고 해도 됨
]

[
    this의 또 다른 특징

    1.  constructor 안에서 쓰면 constructor로 새로생성되는 오브젝트 

    기계 안에서 쓰면 새로 생성되는 오브젝트를 뜻함
    this == 기계(constructor)에 새로 생성되는 오브젝트(instance)

    function 기계(){
        this.이름 = 'Kim'
    } 
    var 오브젝트 = new 기계()
    여기서 오브젝트는 {이름 : 'kim'}




    2. 이벤트리스너 안에서는 e.currentTarget과 동일함
    e.currentTarget 은 지금 이벤트 동작하는 곳을 뜻함

    예시1
    let array = [1,2,3]
    array.forEach(funciton()=>{
        console.log(this)
    })

    답 : 윈도우 3번 출력.

    
    예시2. 
    var 오브젝트 = {
        이름들 : ['김', '이', '박'],
        함수 : function(){
            오브젝트.이름들.forEach(function(){
                console.log(this)
            })
        }
    }

    답 : 윈도우 3번 출력
    해설 : forEach()안에 있는 함수에this가 들어있다. 그런데 이 함수는 특별한 의미가 있는 것이 아닌 일반 함수이다. 


    예시3. 
    var 오브젝트 = {
        
        이름들 : ['김', '이', '박'],
        함수 : function(){
            console.log(this)
            오브젝트.이름들.forEach(function(){

            })
        }
    }

    답 : 오브젝트 출력

    예시4. 
    var 오브젝트 = {
        이름들 : ['김', '이', '박'],
        함수 : function(){
            오브젝트.이름들.forEach(()=>{
                console.log(this)
            })
        }
    }

    답 : 오브젝트 3번 출력 
    arrow function특징 : 내부의 this값을 변화시키지 않음 (외부 this값 그대로 재사용 가능)



    this는 가장 가까운 함수가 실행될 때 그 함수가 포함된 오브젝트를 뜻함
]



[
    함수를 사용하는 이유 == 
    1. 여러가지 기능을 하는 코드를 한 단어로 묶고 재사용하고 싶을 때
    2. 입출력기능을 만들 때

    arrow function을 사용하면 함수 본연의 입출력기능을 아주 직관적으로 잘 표현해준다.

    입출력기능 == 중학교때 배우는 함수
    ex) function add(x){
        return x + 2
    }
    함수의 소괄호 안에는 input역할을 하는 파라미터가 있고
    함수 내에 return이라는 것은 output역할을 하는 키워드이다. 소괄호에 뭔가 집어넣으면 return을 이용해 뭔가 뱉어내는 것, 이것이 바로 함수의 입출력 기능이다.

    그래서 arrow function을 사용하면 입출력기능이 쉽고 이쁘게 표현된다.
     

    장점1. 간단함
    let 두배만들기 = (x)=>{return x*2}
    console.log( 두배만들기(2) )

    장점2. 파라미터가 하나라면 소괄호 생략이 가능함
    let 두배만들기 = x=>{return x*2}
    console.log( 두배만들기(2) )

    장점3. 중괄호 안에 return 한줄 뿐이라면 중괄호와 return 생략이 가능하다.
    let 두배만들기 = x => x*2;


    arrow function의 또다른 특징 : arrow function을 쓰면 내부에서 this값을 쓸 때 밖에 있던 this값을 그대로 사용한다.

    ex1)
    let 오브젝트1 = {
        함수 : function(){console.log(this)}
    }

    오브젝트1.함수()

    결과 : 오브젝트1 출력


    ex2)
    let 오브젝트1 = {
        함수 : ()=>{ console.log(this) }
    }

    오브젝트1.함수()

    결과 : window출력


    이와같이 arrow function은 편리하지만 this의 뜻이 달라지는 것 처럼 function을 완전히 대체하지는 못한다.
]
















[
    자바스크립트가 문자 다루는 방법

    백틱 문자열의 장점
1. 엔터키 가능
2. 중간중간 변수넣기 쉬움 사이에 ${변수} 로 사이에 변수를 넣을 수 있다.


tagged literal
함수() 대신 함수`` 를 붙여도 함수가 실행이 됨

글자의 순서를 변경하고 싶을 때 유용함
ex) 

var 변수 = '손흥민';
var 문자 = `안녕하세요 ${ 변수 } 입니다`;

function 해체분석기(문자들, 변수들){
    console.log( 문자들[1] + 변수들 + 문자들[0] )
}

해체분석기`안녕하세요 ${ 변수 } 입니다`

하면 콘솔창에 입니다 손흥민 안녕하세요 출력
tagged literal을 사용함으로써 변수와 문자를 나누고 문자를 array화 할 수 있고 이들의 순서를 바꾸기에 용이하다.
]
